module JobStatusHandler

  require 'digest/md5'
  #TODO: change this to switch statement rather than many ifs

  def self.handle_status (job_status, newstatus, object, logger, path)

    #status code 101 for disopred .diso2 output file (DISOPRED2 disorder prediction)
    if (job_status.status_class == 101)
      newstatus.status_class = job_status.status_class
      newstatus.status = "DISOPRED2 disorder file"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".diso2"
    newstatus.data = job_status.data
    end

    #status code 100 for Memembed raw output
    if (job_status.status_class == 100)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Memembed Output"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    #status code 99 for Memembed errors
    if (job_status.status_class == 99)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Memembed Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_memembed = 3
    object.save!
    end

    #Final Calculated Energy from Memembed
    if (job_status.status_class == 98)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Memembed Energy"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end
    
    #PDB files generated by DomSerf
    if (job_status.status_class == 97)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Domserf PDB File"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    #SSF file info for the selected templates
    if (job_status.status_class == 96)
      newstatus.status_class = job_status.status_class
      newstatus.status = "DomSerf Domain Templates"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    if (job_status.status_class == 95)
      newstatus.status_class = job_status.status_class
      newstatus.status = "DomSerf PDB Templates"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    if (job_status.status_class == 94)
      newstatus.status_class = job_status.status_class
      newstatus.status = "This model was generated by matching it to known CATH domains using PSI-BLAST and pDomTHREADER"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    if (job_status.status_class == 93)
      newstatus.status_class = job_status.status_class
      newstatus.status = "This model was generated by matching a full length PDB chain and dividing it up in to known CATH domains"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    if (job_status.status_class == 92)
      newstatus.status_class = job_status.status_class
      newstatus.status = "No good models could be found for this sequence"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    #status code 61 for Domserf
    if (job_status.status_class == 91)
      newstatus.status_class = job_status.status_class
      newstatus.status = "DomSerf Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_domserf = 3
    object.save!
    end

    #handle incoming matrix for caching
    #don't insert the matrix if it is corrupt (so far the simple test is that it has the right number of lines in the file, i.e. seq length plus 14
    #Also don't insert if it's already in the DB
    #CURRENTLY COMMENTED OUT WHILE I FIX THIS
    if (job_status.status_class == 89)
      seq = object.QueryString
      md5 = Digest::MD5.hexdigest(seq)
    length = seq.length

    #find out if we already have this file cached
    #caches = CheckPointCache.find(:all, :conditions => ["MD5 = ? AND chk_type =?", md5, job_status.status])

    #if ((length+14) == job_status.data.lines.count) && caches.length == 0
    #cache = CheckPointCache.create()
    #cache.MD5 = md5
    #cache.usages = 1
    #cache.chk_type = job_status.status
    #cache.data = job_status.data

    #Here we flatten the incoming text file to remove any newlines and
    #insert them as literal "\n" strings
    #cache.data.gsub!(/\n|\r|\n\r|\r\n/, '\\'+'n')
    #cache.save!
    #end

    end

    #status code 86 for maketdb error
    if (job_status.status_class == 86)
      newstatus.status_class = job_status.status_class
      newstatus.status = "MakeTDB Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_maketdb = 3
    object.save!
    end
    #statu

    #status code 85 for metsite error
    if (job_status.status_class == 85)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Metsite Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_metsite = 3
    object.save!
    end
    #status code 84 for HSPred error
    if (job_status.status_class == 84)
      newstatus.status_class = job_status.status_class
      newstatus.status = "HsPred Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_hspred = 3
    object.save!
    end

    #status code 69 for BLASTR error
    if (job_status.status_class == 69)
      newstatus.status_class = job_status.status_class
      newstatus.status = "BLAST Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.status = 3
    object.save!
    end

    #status code 68 for pfilt error
    if (job_status.status_class == 68)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Pfilt Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.status = 3
    object.save!
    end

    # status code 67 for FFPred error
    if (job_status.status_class == 67)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_ffpred = 3
    object.save!
    end

    #status code 66 for bioserf error
    if (job_status.status_class == 66)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Bioserf2 Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_bioserf = 3
    object.save!
    end

    #status code 65 for domTHREADER error
    if (job_status.status_class == 65)
      newstatus.status_class = job_status.status_class
      newstatus.status = "domTHREADER Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_domthreader = 3
    object.save!
    end

    #status code 64 for mGenTHREADER error
    if (job_status.status_class == 64)
      newstatus.status_class = job_status.status_class
      newstatus.status = "mGenTHREADER Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_mgenthreader = 3
    object.save!
    end

    #status code 63 for GenTHREADER error
    if (job_status.status_class == 63)
      newstatus.status_class = job_status.status_class
      newstatus.status = "GenTHREADER Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_genthreader = 3
    object.save!
    end

    #status code 62 for Mempack Error
    if (job_status.status_class == 62)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Mempack Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_mempack = 3
    object.save!
    end

    #status code 61 for dompredError
    if (job_status.status_class == 61)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Dompred Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_dompred = 3
    object.save!
    end

    #status code 60 for disoprederror
    if (job_status.status_class == 60)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Disopred Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_disopred = 3
    object.save!
    end

    #status code 59 for svmmemsaterror
    if (job_status.status_class == 59)
      newstatus.status_class = job_status.status_class
      newstatus.status = "SVMMemsat Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_svmmemsat = 3
    object.save!
    end

    #status code 58 for Psipred error
    if (job_status.status_class == 58)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Psipred Error"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    object.program_psipred = 3
    object.save!
    end

    #status code 57 for Psipred SS2 file
    if (job_status.status_class == 57)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Psipred SS2 file"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".ss2"
    newstatus.data = job_status.data
    end

    #status code 56 for Predcit Contacts Results file
    if (job_status.status_class == 56)
      newstatus.status_class = job_status.status_class
      newstatus.status = "No Contact SVM output"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    #status code 56 for Predcit Contacts Results file
    if (job_status.status_class == 83)
      newstatus.status_class = job_status.status_class
      newstatus.status = "No Contact SVM output"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end
    #status code 55 for Predcit Contacts Results file
    if (job_status.status_class == 55)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Contact SVM Output"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".gen_contacts_svm"
    newstatus.data = job_status.data

    end
    #status code 82 for Predcit Contacts Results file
    if (job_status.status_class == 82)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Contact SVM Output"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pgen_contacts_svm"
    newstatus.data = job_status.data

    end

    #status code 54 for Predcit Contacts Results file
    if (job_status.status_class == 54)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Predict Contacts Output"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".gen_contacts"
    newstatus.data = job_status.data

    end

    #status code 54 for Predcit Contacts Results file
    if (job_status.status_class == 81)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Predict Contacts Output"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pgen_contacts"
    newstatus.data = job_status.data

    end

    #status code 53 for maketdb pdb file
    if (job_status.status_class == 53)
      newstatus.status_class = job_status.status_class
      newstatus.status = "TDB File"
      newstatus.content_type = "text/plain"
      newstatus.content_name = "1tdbA0.tdb"
    newstatus.data = job_status.data

    end

    # status code 52 for MEMPACK no contacts predicted
    if (job_status.status_class == 52)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = "No contacts predicted"
      newstatus.data = job_status.status
      newstatus.status = "Mempack predicted no contacts"
      newstatus.content_type = "text/plain"

    end

    # status code 51 for genthreader multiple alignments
    if (job_status.status_class == 51)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      #newstatus.status = "GenThreader Multiple Alignment"
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".genth_msa"
      newstatus.content_type = "text/plain"

    end

    # status code 50 for mgenthreader contactconsensus files
    if (job_status.status_class == 50)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      #newstatus.status = "GenThreader Contact Consensus"
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".gen_contact_cons"
      newstatus.content_type = "text/plain"

    end

    # status code 50 for mgenthreader contactconsensus files
    if (job_status.status_class == 80)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      #newstatus.status = "GenThreader Contact Consensus"
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pgen_contact_cons"
      newstatus.content_type = "text/plain"

    end

    # status code 72 for mgenthreader jalview ann files
    if (job_status.status_class == 72)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      newstatus.status = "Genthreader ann file"
      newstatus.content_type = "text/plain"

    end

    # status code 73 for mgenthreader jalview aln files
    if (job_status.status_class == 73)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      newstatus.status = "Genthreader aln file"
      newstatus.content_type = "text/plain"

    end

    # status code 75 for domthreader jalview aln files
    if (job_status.status_class == 75)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      newstatus.status = "domthreader aln file"
      newstatus.content_type = "text/plain"

    end

    # status code 74 for fomthreader jalview ann files
    if (job_status.status_class == 74)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      newstatus.status = "domthreader ann file"
      newstatus.content_type = "text/plain"

    end

    # status code 49 for genthreader jalview aln files
    if (job_status.status_class == 49)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      newstatus.status = "Genthreader aln file"
      newstatus.content_type = "text/plain"

    end

    # status code 48 for genthreader jalview ann files
    if (job_status.status_class == 48)
      newstatus.status_class = job_status.status_class
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data
      newstatus.status = "Genthreader ann file"
      newstatus.content_type = "text/plain"

    end

    # status code 44 for MEMPACK bad TM Topology
    if (job_status.status_class == 44)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Mempack Bad Topology"
      newstatus.content_type = "text/plain"
      newstatus.content_name = "Mempack: bad topology"
      newstatus.data = job_status.status

    end

    #status code 45 for mempack graph results file
    if (job_status.status_class == 45)
      newstatus.status_class = job_status.status_class
      newstatus.status = "MEMPACK Graph Results"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".mempack_graph_data"
    newstatus.data = job_status.data

    end

    #status code 46 for mempack lipid results file
    if (job_status.status_class == 46)
      newstatus.status_class = job_status.status_class
      newstatus.status = "MEMPACK Lipid Exposure Results"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".mempack_lip_exposure"
    newstatus.data = job_status.data

    end

    #status code 47 for mempack lipid results file
    if (job_status.status_class == 47)
      newstatus.status_class = job_status.status_class
      newstatus.status = "MEMPACK Contact Prediction Results"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".mempack_lip_results"
    newstatus.data = job_status.data

    end

    # status code 38 for: FFPred, featcfg data file
    if (job_status.status_class == 38)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred featcfg data"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 35 for: FFPred, "results" file
    if (job_status.status_class == 35)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred feature results"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 40 for: FFPred, TM schematic
    if (job_status.status_class == 40)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred TM schematic"
      newstatus.content_type = "binary/png"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 39 for: FFPred, sequence schematic
    if (job_status.status_class == 39)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred sequence schematic"
      newstatus.content_type = "binary/png"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 90 for: FFPred, "full" GO terms, all SVM outputs
    if (job_status.status_class == 90)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred full, all SVM outputs"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".ffpred_go"
    newstatus.data = job_status.data

    end

    # status code 87 for: FFPred, "full" GO terms, formatted predictions file
    if (job_status.status_class == 87)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred predictions full, formatted"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".ffpred"
    newstatus.data = job_status.data

    end

    # status code 36 for: FFPred, "strict" GO terms, formatted predictions file
    if (job_status.status_class == 36)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred predictions strict, formatted"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 88 for: FFPred, "full" GO terms, raw predictions file
    if (job_status.status_class == 88)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred predictions full, raw"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 37 for: FFPred, "strict" GO terms, raw predictions file
    if (job_status.status_class == 37)
      newstatus.status_class = job_status.status_class
      newstatus.status = "FFPred predictions strict, raw"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    #status code 34 for hspred pdb file
    if (job_status.status_class == 34)
      newstatus.status_class = job_status.status_class
      newstatus.status = "HSPred pdb file"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    #status code 33 for hspred scores
    if (job_status.status_class == 33)
      newstatus.status_class = job_status.status_class
      newstatus.status = "HSPred scores"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    #status code 30 for dompred postscript
    if (job_status.status_class == 30)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Dompred postscript"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    #status code 29 for dompred blast table
    if (job_status.status_class == 29)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Dompred Blast Table"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".domp_bls_table"
    newstatus.data = job_status.data

    #if self.Type =~ /dompred/
    #  puts "writing file : " + path+job_status.status
    #  f = File.open(path+job_status.status, 'w')
    #  f.write(job_status.data)
    #  f.close
    #end

    end

    #status code 28 for domssea boundaries
    if (job_status.status_class == 28)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Dompred Boundaries"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status

    newstatus.data = job_status.data
    end

    #status code 27 for domssea results
    if (job_status.status_class == 27)
      newstatus.status_class = job_status.status_class
      newstatus.status = "Domssea"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".domssea"
    newstatus.data = job_status.data
    end

    #status code 26 for psiblast results
    if (job_status.status_class == 26)

      if job_status.status !~ /BLAST complete/
        #don't insert a regu;ar blast done
        begin

          if object.Type =~ /disopred/ || object.Type =~ /dompred/ || object.Type =~ /seqJob/

            puts "writing file : " + path+job_status.status
            f = File.open(path+job_status.status, 'w:binary')
          f.write(job_status.data)
          f.close
          end
        rescue Exception=>e
          JobMailer.insertfailure(object.id,job_status.status_class,job_status.status+" Didn't write the blast file to filesystem").deliver
        end
      end

      newstatus.status_class = job_status.status_class
      newstatus.status = "PSI-BLAST"
      newstatus.content_type = "binary/blast"
      newstatus.content_name = job_status.status

      if object.Type =~ /disopred/ || object.Type =~ /dompred/ || object.Type =~ /seqJob/
      #Having written the blast results to the file system there is no need to stick them in the db
      #especially as they may overflow the incoming packet buffer for mysql
      newstatus.data = job_status.status
      else
      newstatus.data = job_status.data
      end
    end

    #status code 25 for disopred .diso output file (general disorder prediction)
    if (job_status.status_class == 25)
      newstatus.status_class = job_status.status_class
      newstatus.status = "DISOPRED3 disorder file"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".diso"
    newstatus.data = job_status.data

    end

    #status code 24 for disopred .pbdat output file (prediction of binding for disordered residues)
    if (job_status.status_class == 24)
      newstatus.status_class = job_status.status_class
      newstatus.status = "DISOPRED3 binding file"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pbdat"
    newstatus.data = job_status.data

    end

    #status code 23 for metsite pdb file
    if (job_status.status_class == 23)
      newstatus.status_class = job_status.status_class
      newstatus.status = "metsite pdb file"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close
    end

    # status code 22 for metsite data
    if (job_status.status_class == 22)
      newstatus.status_class = job_status.status_class
      newstatus.status = "metsite prediction score"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    # status code 21 for memsat-svm cartoon
    if (job_status.status_class == 21)
      newstatus.status_class = job_status.status_class
      newstatus.status = "memsat-svm schematic"
      newstatus.content_type = "binary/png"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      thumbnail = Thumbnail.make_image_thumbnail(newstatus, "858", "415")
    thumbnail.request_result = newstatus
    thumbnail.save!
    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close
    end

    # status code 43 for mempack cartoon
    if (job_status.status_class == 43)
      newstatus.status_class = job_status.status_class
      newstatus.status = "mempack schematic"
      newstatus.content_type = "binary/jpg"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      # thumbnail the file
      thumbnail = Thumbnail.make_image_thumbnail(newstatus, "858", "429")
    thumbnail.request_result = newstatus
    thumbnail.save!

    end

    # status code 20 for memsat cartoon
    if (job_status.status_class == 20)
      newstatus.status_class = job_status.status_class
      newstatus.status = "memsat cartoon"
      newstatus.content_type = "binary/png"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      thumbnail = Thumbnail.make_image_thumbnail(newstatus, "858", "415")
    thumbnail.request_result = newstatus
    thumbnail.save!

    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close
    end

    if (job_status.status_class == 32)
      newstatus.status_class = job_status.status_class
      newstatus.status = "memsat-svm cartoon"
      newstatus.content_type = "binary/png"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      thumbnail = Thumbnail.make_image_thumbnail(newstatus, "858", "415")
    thumbnail.request_result = newstatus
    thumbnail.save!
    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close
    end

    # status code 19 for memsat-svm results
    if (job_status.status_class == 19)
      newstatus.status_class = job_status.status_class
      newstatus.status = "memsat-svm results"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".memsatsvm"
    newstatus.data = job_status.data
    end

    # status code 42 for memsat-svm-3 results
    if (job_status.status_class == 42)
      newstatus.status_class = job_status.status_class
      newstatus.status = "memsat-svm-3 results"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    end

    # status code 16 for memsat results
    if (job_status.status_class == 16)
      newstatus.status_class = job_status.status_class
      newstatus.status = "memsat results"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".memsat3"
    newstatus.data = job_status.data
    end

    # status code 15 for mempred results
    if (job_status.status_class == 15)
      newstatus.status_class = job_status.status_class
      newstatus.status = "mempred results"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    # status code 14 for png files
    if (job_status.status_class == 14)
      newstatus.status_class = job_status.status_class
      newstatus.status = "png file"
      newstatus.content_type = "binary/png"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      thumbnail = Thumbnail.make_image_thumbnail(newstatus, "286", "370")
    thumbnail.request_result = newstatus
    thumbnail.save!
    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close

    end

    # status code 13 for pdf files
    if (job_status.status_class == 13)
      newstatus.status_class = job_status.status_class
      newstatus.status = "pdf file"
      newstatus.content_type = "binary/pdf"
      #newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pdf"
      if( job_status.status =~ /\.diso\./)
        newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".diso.pdf"
      else
        newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".psipred.pdf"
      end
    newstatus.data = job_status.data

    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close

    end

    # status code 12 for postscript files
    if (job_status.status_class == 12)
      newstatus.status_class = job_status.status_class
      newstatus.status = "postscript diagram"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      if( job_status.status =~ /\.diso\./)
        newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".diso.ps"
      else
        newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".psipred.ps"
      end
    newstatus.data = job_status.data

    #write this data out to the public portion of the webserver so people can download it.
    #puts "writing file : " + path+job_status.status
    #f = File.open(path+job_status.status, 'w')
    #f.write(job_status.data)
    #f.close

    end

    # status code 11 for psipred results
    if (job_status.status_class == 11)
      newstatus.status_class = job_status.status_class
      newstatus.status = "psipred results"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".psipass2"
    newstatus.data = job_status.data
    end

    # status code 10 for domgenthreader results table
    if (job_status.status_class == 10)
      newstatus.status_class = job_status.status_class
      newstatus.status = "domGenTHREADER results table"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pdom_table"
    newstatus.data = job_status.data
    end

    # status code 9 for genthreader, mgenthreader results table
    if (job_status.status_class == 79)
      newstatus.status_class = job_status.status_class
      newstatus.status = "domTHREADER results table"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    # status code 8 for genthreader, mgenthreader and domgenthreader alignments
    # Here we also send the data to be written to the public directory for the jalview component
    if (job_status.status_class == 78)
      newstatus.status_class = job_status.status_class
      newstatus.status = "domTHREADER Alignment result"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    #if job_status.status !~ /initial/
    #  GenAlignmentHandler.write_gen_alignment(job_status.data, job_status.status, object.id, path,object)
    #end

    end

    # status code 9 for genthreader, mgenthreader results table
    if (job_status.status_class == 77)
      newstatus.status_class = job_status.status_class
      newstatus.status = "mGenTHREADER results table"
      newstatus.content_type = "text/plain"
      newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pgen_table"
    newstatus.data = job_status.data
    end

    # status code 8 for genthreader, mgenthreader and domgenthreader alignments
    # Here we also send the data to be written to the public directory for the jalview component
    if (job_status.status_class == 76)
      newstatus.status_class = job_status.status_class
      newstatus.status = "mGenTHREADER Alignment result"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    #if job_status.status !~ /initial/
    #  GenAlignmentHandler.write_gen_alignment(job_status.data, job_status.status, object.id, path,object)
    #end

    end

    # status code 9 for genthreader, mgenthreader results table
    if (job_status.status_class == 9 || job_status.status_class == 18)
      newstatus.status_class = job_status.status_class
      newstatus.status = "GenTHREADER results table"
      newstatus.content_type = "text/plain"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".gen_table"
    newstatus.data = job_status.data
    end

    # status code 8 for genthreader, mgenthreader and domgenthreader alignments
    # Here we also send the data to be written to the public directory for the jalview component
    if (job_status.status_class == 8 || job_status.status_class == 17)
      newstatus.status_class = job_status.status_class
      newstatus.status = "GenTHREADER Alignment result"
      newstatus.content_type = "text/plain"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data

    #if job_status.status !~ /initial/
    #  GenAlignmentHandler.write_gen_alignment(job_status.data, job_status.status, object.id, path,object)
    #end

    end

    # status code 7 for intermediate pdb structures (such as alternate clusters)
    # for informational purposes
    if (job_status.status_class == 7)
      newstatus.status_class = job_status.status_class
      newstatus.status = "intermediate pdb file result"
      newstatus.content_type = "application/octet-stream"
    newstatus.content_name = job_status.status
    newstatus.data = job_status.data
    end

    # status code 6 for final pdb structures
    if (job_status.status_class == 6)
      newstatus.status_class = job_status.status_class
      newstatus.status = "pdb file result"
      newstatus.content_type = "application/octet-stream"
      #newstatus.content_name = job_status.status
      newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pdb"

      if(job_status.status =~ /(\d+)_(\d+)\.pdb/)
        newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+"_"+$1+"_"+$2+".pdb"
      else
        newstatus.content_name = object.UUID.to_s+"."+object.name.to_s+".pdb"
      end
    newstatus.data = job_status.data
    end

    # status code 5 for GenTHREADER html outputs
    if (job_status.status_class == 5)
      newstatus.status_class = job_status.status_class
      newstatus.status = job_status.status
      newstatus.content_type = "text/html"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      puts "writing file : " + path+object.id.to_s+".gen.html.gz"
      f = File.open(path+object.id.to_s+".gen.html.gz", "w:binary")
      f.write(job_status.data)
      f.close
      if File.exist?(path+object.id.to_s+".gen.html.gz")
        command = "/bin/gunzip -f " + path+object.id.to_s+".gen.html.gz"
        puts "unzipping" + command
        io=IO.popen(command)
      io.close
      end
    end

    # status code 5 for mGenTHREADER html outputs
    if (job_status.status_class == 70)
      newstatus.status_class = job_status.status_class
      newstatus.status = job_status.status
      newstatus.content_type = "text/html"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      puts "writing file : " + path+object.id.to_s+".mgen.html.gz"
      f = File.open(path+object.id.to_s+".mgen.html.gz", 'w:binary')
      f.write(job_status.data)
      f.close
      if File.exist?(path+object.id.to_s+".mgen.html.gz")
        command = "/bin/gunzip -f " + path+object.id.to_s+".mgen.html.gz"
        io=IO.popen(command)
      io.close
      end
    end

    # status code 5 for domTHREADER html outputs
    if (job_status.status_class == 71)
      newstatus.status_class = job_status.status_class
      newstatus.status = job_status.status
      newstatus.content_type = "text/html"
      newstatus.content_name = job_status.status
      newstatus.data = job_status.data

      puts "writing file : " + path+object.id.to_s+".dgen.html.gz"
      f = File.open(path+object.id.to_s+".dgen.html.gz", 'w:binary')
      f.write(job_status.data)
      f.close
      if File.exist?(path+object.id.to_s+".dgen.html.gz")
        command = "/bin/gunzip -f " + path+object.id.to_s+".dgen.html.gz"
        io=IO.popen(command)
      io.close
      end
    end

    # status code 4 for debug info
    if (job_status.status_class == 4)
      newstatus.status_class = job_status.status_class
      newstatus.status = job_status.status

      if (!job_status.data.nil?)
        newstatus.content_type = "text/plain"
        newstatus.content_name = "#{newstatus.id}.txt"
      newstatus.data = job_status.data
      end
    end

    # status code 3 for error info
    if (job_status.status_class == 3)
      newstatus.status_class = job_status.status_class
      newstatus.status = job_status.status

      if (!job_status.data.nil?)
        newstatus.content_type = "text/plain"
        newstatus.content_name = "error_log_#{newstatus.id}.txt"
      newstatus.data = job_status.data
      end
      JobMailer.error(object, job_status.status).deliver if !object.address.nil? && (object.address.length > 5)
    end

  end

end
